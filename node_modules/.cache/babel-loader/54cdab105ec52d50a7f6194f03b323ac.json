{"ast":null,"code":"var _jsxFileName = \"/Users/courtneyorcutt/Desktop/Mars-API-main/Mars-API/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css'; // import all the different pages \n\nimport Navbar from \"./Pages/navbar.js\";\nimport PhotoContainer from \"./Pages/photocontain.js\";\nimport FavoritesContainer from \"./Pages/favouritescontain.js\"; // DatePicker requires moment.js\n// used in NavBar below date={this.state.date}\n\nimport moment from \"moment\"; // In order to choose a random photo to display a surprise date\n\nimport momentRandom from \"moment-random\"; // in order to fetch (this would normally be hidden)\n// but for purposes of transparency in application it is shown\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'iKliHzd4DwjCdUJlf9CipcrQTIHlYgGJAsyHwLBE';\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      // depending on the date chosen, the photos can change, \n      // and the favourites can change\n      date: moment(),\n      // will grab current photo moment()\n      photo: \"\",\n      favorites: [],\n      // will be stored in an array list\n      viewingFavorites: false\n    };\n\n    this.setPhoto = date => {\n      fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${API_KEY}`).then(response => response.json()).then(json => this.setState({\n        photo: json\n      }));\n    };\n\n    this.addtoFavorites = photo => {\n      this.setState({\n        favorites: [...this.state.favorites, photo]\n      });\n    };\n\n    this.viewFavorites = () => {\n      this.setState({\n        viewingFavorites: true\n      });\n    };\n\n    this.viewPhoto = photo => {\n      this.setState({\n        viewingFavorites: false,\n        photo: photo,\n        date: moment(photo.date, \"YYYY-MM-DD\")\n      });\n    };\n\n    this.removeFromFavorites = photo => {\n      let newFavorites = this.state.favorites.filter(favorite => favorite !== photo);\n      this.setState({\n        favorites: newFavorites\n      });\n    };\n\n    this.formatDate = date => {\n      if (date) {\n        let month = date.month() + 1;\n        let day = date.date();\n        let year = date.year();\n        return `${year}-${month}-${day}`;\n      }\n    };\n\n    this.handleChange = date => {\n      this.setState({\n        date: date,\n        viewingFavorites: false\n      });\n      this.setPhoto(this.formatDate(date));\n    };\n\n    this.handleClick = () => {\n      let randomDate = momentRandom(moment(), moment().year(2000));\n      this.setState({\n        date: randomDate,\n        viewingFavorites: false\n      }); // formateDate by turning into string and passing into setPhoto function\n      // for API\n\n      this.setPhoto(this.formatDate(randomDate));\n    };\n  }\n\n  // fetch the nasa photo, explaination, date, title, etc.\n  // set it to the current state\n  // this is a lifecycle method which will automatically render API\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}`).then(response => response.json()).then(json => this.setState({\n      photo: json\n    }));\n  } // use photo={this.state.photo} in PhotoContainer to render API\n  // also want to set setPhoto based on the date chosen so that the\n  // API is fetched for a given date in the date picker (call this.setPhoto)\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: \"url(/telescope.jpg)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        viewFavorites: this.viewFavorites,\n        viewingFavorites: this.state.viewingFavorites,\n        setPhoto: this.setPhoto,\n        photo: this.state.photo,\n        date: this.state.date,\n        handleChange: this.handleChange,\n        handleClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), this.state.viewingFavorites ? /*#__PURE__*/_jsxDEV(FavoritesContainer, {\n        favorites: this.state.favorites,\n        viewPhoto: this.viewPhoto,\n        removeFromFavorites: this.removeFromFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PhotoContainer, {\n        favorites: this.state.favorites,\n        setPhoto: this.setPhoto,\n        photo: this.state.photo,\n        addtoFavorites: this.addtoFavorites,\n        removeFromFavorites: this.removeFromFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/courtneyorcutt/Desktop/Mars-API-main/Mars-API/src/App.js"],"names":["React","Component","Navbar","PhotoContainer","FavoritesContainer","moment","momentRandom","API_KEY","App","state","date","photo","favorites","viewingFavorites","setPhoto","fetch","then","response","json","setState","addtoFavorites","viewFavorites","viewPhoto","removeFromFavorites","newFavorites","filter","favorite","formatDate","month","day","year","handleChange","handleClick","randomDate","componentDidMount","render","backgroundImage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n// import all the different pages \nimport Navbar from \"./Pages/navbar.js\";\nimport PhotoContainer from \"./Pages/photocontain.js\";\nimport FavoritesContainer from \"./Pages/favouritescontain.js\";\n\n// DatePicker requires moment.js\n// used in NavBar below date={this.state.date}\nimport moment from \"moment\";\n\n// In order to choose a random photo to display a surprise date\nimport momentRandom from \"moment-random\";\n\n// in order to fetch (this would normally be hidden)\n// but for purposes of transparency in application it is shown\nconst API_KEY = 'iKliHzd4DwjCdUJlf9CipcrQTIHlYgGJAsyHwLBE';\n\nclass App extends Component {\n  state = {\n    // depending on the date chosen, the photos can change, \n    // and the favourites can change\n    date: moment(), // will grab current photo moment()\n    photo: \"\",\n    favorites: [], // will be stored in an array list\n    viewingFavorites: false\n  };\n\n  // fetch the nasa photo, explaination, date, title, etc.\n  // set it to the current state\n  // this is a lifecycle method which will automatically render API\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}`)\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  } // use photo={this.state.photo} in PhotoContainer to render API\n\n  // also want to set setPhoto based on the date chosen so that the\n  // API is fetched for a given date in the date picker (call this.setPhoto)\n  setPhoto = date => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${API_KEY}`)\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  };\n\n  // also want the user to be able to like a photo and view it\n  // later as if it was archived.\n  addtoFavorites = photo => {\n    this.setState({ favorites: [...this.state.favorites, photo] });\n  };\n\n  viewFavorites = () => {\n    this.setState({ viewingFavorites: true });\n  };\n\n  viewPhoto = photo => {\n    this.setState({\n      viewingFavorites: false,\n      photo: photo,\n      date: moment(photo.date, \"YYYY-MM-DD\")\n    });\n  };\n\n  // from FavouriteCard.js will appear red\n  removeFromFavorites = photo => {\n    let newFavorites = this.state.favorites.filter(\n      favorite => favorite !== photo\n    );\n    this.setState({ favorites: newFavorites });\n  };\n\n  // format into a string\n  formatDate = date => {\n    if (date) {\n      let month = date.month() + 1;\n      let day = date.date();\n      let year = date.year();\n      return `${year}-${month}-${day}`;\n    }\n  };\n\n  // from dateInput\n  handleChange = date => {\n    this.setState({ date: date, viewingFavorites: false });\n    this.setPhoto(this.formatDate(date));\n  };\n\n  // from dateInput when the button is clicked, the \n  handleClick = () => {\n    let randomDate = momentRandom(moment(), moment().year(2000));\n    this.setState({ date: randomDate, viewingFavorites: false });\n    // formateDate by turning into string and passing into setPhoto function\n    // for API\n    this.setPhoto(this.formatDate(randomDate));\n  };\n\n  render() {\n    return (\n      <div style={{ backgroundImage: \"url(/telescope.jpg)\" }}>\n        <Navbar\n          viewFavorites={this.viewFavorites}\n          viewingFavorites={this.state.viewingFavorites}\n          setPhoto={this.setPhoto}\n          photo={this.state.photo}\n          date={this.state.date}\n          handleChange={this.handleChange}\n          handleClick={this.handleClick}\n        />\n        {this.state.viewingFavorites ? (\n          <FavoritesContainer\n            favorites={this.state.favorites}\n            viewPhoto={this.viewPhoto}\n            removeFromFavorites={this.removeFromFavorites}\n          />\n        ) : (\n          <PhotoContainer\n            favorites={this.state.favorites}\n            setPhoto={this.setPhoto}\n            photo={this.state.photo}\n            addtoFavorites={this.addtoFavorites}\n            removeFromFavorites={this.removeFromFavorites}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}