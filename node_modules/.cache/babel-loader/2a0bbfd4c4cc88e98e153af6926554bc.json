{"ast":null,"code":"const moment = require('moment');\n/**\n * Generates a random moment.js object\n * \n * @param {any} end - END date [Anything a moment constructor accepts]\n * @param {any} start - START date [Anything a moment constructor accepts]\n * @returns \n */\n\n\nfunction momentRandom() {\n  let end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : moment();\n  let start = arguments.length > 1 ? arguments[1] : undefined;\n  const endTime = +moment(end);\n\n  const randomNumber = function (to) {\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return Math.floor(Math.random() * (to - from) + from);\n  };\n\n  if (start) {\n    const startTime = +moment(start);\n\n    if (startTime > endTime) {\n      throw new Error('End date is before start date!');\n    }\n\n    return moment(randomNumber(endTime, startTime));\n  }\n\n  return moment(randomNumber(endTime));\n}\n\nmodule.exports = momentRandom;","map":{"version":3,"sources":["/Users/courtneyorcutt/Desktop/Mars-API-main/Mars-API/node_modules/moment-random/src/index.js"],"names":["moment","require","momentRandom","end","start","endTime","randomNumber","to","from","Math","floor","random","startTime","Error","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,GAA6C;AAAA,MAAvBC,GAAuB,uEAAjBH,MAAM,EAAW;AAAA,MAAPI,KAAO;AAC3C,QAAMC,OAAO,GAAG,CAACL,MAAM,CAACG,GAAD,CAAvB;;AACA,QAAMG,YAAY,GAAG,UAACC,EAAD;AAAA,QAAKC,IAAL,uEAAY,CAAZ;AAAA,WACnBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,EAAE,GAAGC,IAAtB,IAA8BA,IAAzC,CADmB;AAAA,GAArB;;AAGA,MAAIJ,KAAJ,EAAW;AACT,UAAMQ,SAAS,GAAG,CAACZ,MAAM,CAACI,KAAD,CAAzB;;AACA,QAAIQ,SAAS,GAAGP,OAAhB,EAAyB;AACvB,YAAM,IAAIQ,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,WAAOb,MAAM,CAACM,YAAY,CAACD,OAAD,EAAUO,SAAV,CAAb,CAAb;AACD;;AACD,SAAOZ,MAAM,CAACM,YAAY,CAACD,OAAD,CAAb,CAAb;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["const moment = require('moment');\n\n/**\n * Generates a random moment.js object\n * \n * @param {any} end - END date [Anything a moment constructor accepts]\n * @param {any} start - START date [Anything a moment constructor accepts]\n * @returns \n */\nfunction momentRandom(end = moment(), start) {\n  const endTime = +moment(end);\n  const randomNumber = (to, from = 0) =>\n    Math.floor(Math.random() * (to - from) + from);\n\n  if (start) {\n    const startTime = +moment(start);\n    if (startTime > endTime) {\n      throw new Error('End date is before start date!');\n    }\n    return moment(randomNumber(endTime, startTime));\n  }\n  return moment(randomNumber(endTime));\n}\n\nmodule.exports = momentRandom;"]},"metadata":{},"sourceType":"script"}